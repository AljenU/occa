#define X_OUTER_TAG 0
#define Y_OUTER_TAG 1

#define X_INNER_TAG 1
#define Y_INNER_TAG 0

const float tStencil[] = {1.0/(dt*dt), -2.0/(dt*dt), 1.0/(dt*dt)};
const float xStencil[] = {1.0/(dx*dx), -2.0/(dx*dx), 1.0/(dx*dx)};

// 0.9899*sqrt(8.0*log(10.0))/(PI*freq);
const float hat_t0 = 1.3523661426929/freq;

float hatWavelet(float t){
  const float pift  = PI*freq*(t - hat_t0);
  const float pift2 = pift*pift;

  return (1.0 - 2.0*pift2)*exp(-pift2);
}

void fd2d(float *u1, float *u2, float *u3,
          const float currentTime){

  for(int yBlock = 0; yBlock < yBlocks; ++yBlock; outer##Y_OUTER_TAG){
    for(int xBlock = 0; xBlock < xBlocks; ++xBlock; outer##X_OUTER_TAG){

      for(int yPoint = 0; yPoint < yPoints; ++yPoint; inner##Y_INNER_TAG){
        for(int xPoint = 0; xPoint < xPoints; ++xPoint; inner##X_INNER_TAG){

          const int tx = xPoint + (xBlock * xPoints);
          const int ty = yPoint + (yBlock * yPoints);

          const int id = ty*w + tx;

          const float r_u2 = u2[id];
          const float r_u3 = u3[id];

          float lap = 0.0;

          for(int i = -sr; i <= sr; i++){
            const int nX = (tx + w + i) % w;
            const int nY = (ty + h + i) % h;

            lap += xStencil[sr + i]*u2[ty*w + nX] + xStencil[sr + i]*u2[nY*w + tx];
          }

          const float u_n1 = (-tStencil[1]*r_u2 - tStencil[2]*r_u3 + lap)/tStencil[0];

          if( (tx == mX) && (ty == mY) )
            u1[id] = u_n1 + hatWavelet(currentTime)/tStencil[0];
          else
            u1[id] = u_n1;

        }
      }

    }
  }

}
